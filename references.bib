
@BOOK{Kummer02,
        AUTHOR             = {Kummer, Olaf},
        PUBLISHER          = {Logos Verlag},
        TITLE              = {{Referenznetze}},
        ADDRESS            = {Berlin},
        YEAR               = 2002,
        ISBN               = {978-3-8325-0035-1},
        URL =    {http://www.logos-verlag.de/cgi-bin/engbuchmid?isbn=0035\&lng=eng\&id=}
}


@MastersThesis{Wincierz18,
  author =  {Martin Wincierz},
  title =   {{Verbesserung der Erweiterbarkeit und Benutzbarkeit der grafischen Oberfl{\"a}che des Petrinetz Simulators \textsc{Renew}}},
  school =  FBIUniHHab2011,
  year =    2018,
  type =    masterarbeit,
  address = FBIUniAdresse
}


@book{Roelke04,
   AUTHOR    = {R{\"o}lke, Heiko},
   SERIES    = {Agent Technology -- Theory and Applications},
   VOLUME    = {2},
   TITLE     = {{Modellierung von Agenten und Multiagentensystemen -- Grundlagen und Anwendungen}},
   PUBLISHER = {Logos Verlag},
   ADDRESS   = {Berlin},
   YEAR      = 2004,
   URL       = {http://logos-verlag.de/cgi-bin/engbuchmid?isbn=0768\&lng=eng\&id=}
}


@PhdThesis{Duvigneau09,
  author =  {Duvigneau, Michael},
  address =  FBIUniAdresse,
  school =  FBIUniHHab2006,
  title =  {{Konzeptionelle Modellierung von Plugin-Systemen mit
                  Petrinetzen}},
  type =  dissertation,
  year =  2009,
  month =  oct,
  url =   {http://www.sub.uni-hamburg.de/opus/volltexte/2010/4662/},
  note =   {\url{http://www.sub.uni-hamburg.de/opus/volltexte/2010/4662/}},
  urn =   {urn:nbn:de:gbv:18-46623},
  abstract =  {Die Komplexit{\"a}t moderner Softwaresysteme w{\"a}chst nicht
                  zuletzt aufgrund des Wunsches, sowohl aktuelle als auch
                  zuk{\"u}nftige Bed{\"u}rfnisse vieler verschiedener Anwender mit
                  einem einzigen System befriedigen zu wollen.  Eine in der
                  Praxis oft eingesetzte L{\"o}sung zur Bew{\"a}ltigung der sich
                  ergebenden Komplexit{\"a}t besteht darin, ein Plugin-System
                  in die Software zu integrieren.  Ein Plugin-System
                  erlaubt es Anwendern, ein relativ schlankes Kernsystem
                  w{\"a}hrend seines Einsatzes an individuelle Bed{\"u}rfnisse
                  anzupassen, indem vorgefertigte Plugins auf einfachste
                  Weise zum Softwaresystem hinzugef{\"u}gt oder wieder daraus
                  entfernt werden.  Um den Konfigurationskomfort f{\"u}r
                  Anwender weiter zu erh{\"o}hen, werden zunehmend dynamisch,
                  also w{\"a}hrend der Laufzeit rekonfigurierbare
                  Plugin-Systeme implementiert.

                  Dem h{\"a}ufigen praktischen Einsatz des Plugin-Konzepts
                  steht bisher eine relativ geringe Aufmerksamkeit in der
                  Forschung gegen{\"u}ber.  Ziel dieser Arbeit ist daher die
                  Definition, Modellierung und Implementierung zentraler
                  Konzepte von Plugin-Systemen.  Eine weitere
                  Herausforderung ergibt sich aus der Tatsache, dass
                  moderne Softwaresysteme -- also auch Plugin-Systeme --
                  inh{\"a}rent nebenl{\"a}ufig sind.  Die sich daraus ergebenden
                  M{\"o}glichkeiten und Risiken werden im Rahmen der
                  Modellierung behandelt.

                  Einige Paradigmen und Techniken aus dem Bereich der
                  Softwareentwicklung werden bereits zur Beschreibung von
                  Plugin-Systemen eingesetzt.  Hierzu z{\"a}hlen das Paradigma
                  der komponentenbasierten Softwareentwicklung sowie die
                  Techniken zur Beschreibung von Softwarearchitekturen und
                  der Entwurfsmuster.  Die im Rahmen dieser Ans{\"a}tze
                  formulierten Konzepte zeigen jedoch Schw{\"a}chen in der
                  Modellierung von dynamischen {\"A}nderungen und von
                  m{\"o}glicherweise vorhandener Nebenl{\"a}ufigkeit. Daher werden
                  diese Ans{\"a}tze durch das Paradigma der agentenorientierten
                  Softwareentwicklung und die Technik der Modellierung mit
                  Referenznetzen erg{\"a}nzt.  Beide Ans{\"a}tze sind auf die
                  Modellierung nebenl{\"a}ufiger, sich dynamisch ver{\"a}ndernder
                  Systeme ausgerichtet, werden aber noch nicht im Kontext
                  von Plugin-Systemen eingesetzt.

                  Das breite Spektrum praktisch eingesetzter Plugin-Systeme
                  wird anhand der komplexen Softwarearchitekturen der
                  Mozilla-Anwendungssuite und der Eclipse-Plattform sowie
                  einiger weiterer Systeme vorgestellt.  Aus diesem
                  Spektrum werden die einfache (dynamische)
                  Rekonfigurierbarkeit, eine starke Kapselung und das
                  Konzept der intendierten Erweiterbarkeit als zentrale
                  Eigenschaften des Plugin-Konzepts herausgearbeitet.
                  Weitere Anforderungen an das Modell sind die Festlegung
                  von Plugin-Lebenszyklen, die Existenz mehrerer
                  Verwaltungsebenen, das Ber{\"u}cksichtigen von
                  Nebenl{\"a}ufigkeit sowie eine intuitive Modellierung mit
                  pr{\"a}ziser Semantik.  Der auf Basis dieser Eigenschaften
                  definierte Plugin-Begriff wird zu den Begriffen des
                  Objekts, des Moduls, der Komponente und des Agenten in
                  Beziehung gesetzt.

                  Zum Sch{\"a}rfen der Begriffe werden zentrale Konzepte von
                  Plugin-Systemen mittels Referenznetzen nach dem Prinzip
                  der schrittweisen Verfeinerung modelliert
                  ("Implementierung durch Spezifikation").  Das Modell
                  deckt s{\"a}mtliche eben genannten Anforderungen ab, schr{\"a}nkt
                  die Nebenl{\"a}ufigkeit nicht unn{\"o}tig ein und ist mit einer
                  pr{\"a}zisen operationalen Semantik ausgestattet.  Die
                  Tauglichkeit des modellierten Konzepts wird zum einen
                  durch einen Abgleich mit den vielf{\"a}ltigen Eigenschaften
                  existierender Plugin-Systeme belegt.  Zum anderen werden
                  die konzeptionellen Ergebnisse in Form mehrerer
                  Prototypen auf das Petrinetzwerkzeug Renew {\"u}bertragen.}
}

@MASTERSTHESIS{Schumacher03,
        AUTHOR             = {Schumacher, J{\"o}rn},
        ADDRESS            = FBIUniAdresse,
        MONTH              = oct,
        SCHOOL             = FBIUniHHbis2005,
        TITLE              = {{Eine Plugin-Architektur f{\"u}r Renew -- Konzepte, Methoden, Umsetzung}},
        TYPE               = diplomarbeit,
        YEAR               = 2003
}


@BOOK{Cabac10a,
  title = {Modeling Petri Net-Based Multi-Agent Applications},
  publisher = {Logos Verlag},
  year = {2010},
  author = {Cabac, Lawrence},
  note = {http://www.sub.uni-hamburg.de/opus/volltexte/2010/4666/},    
  series =   {Agent Technology -- Theory and Applications},
  volume = {5},
  address = {Berlin},
  booktitle = {Agent Technology -- Theory and Applications},
  url =       {http://www.logos-verlag.de/cgi-bin/engbuchmid?isbn=2673\&lng=eng\&id=},
}

@Manual{Kummer+99a,
  title =    {Renew -- User Guide},
  author =   {Kummer, Olaf and Wienberg, Frank},
  organization = {University of Hamburg, Faculty of Informatics, Theoretical Foundations Group},
  address =  {Hamburg},
  edition =  {Release 1.0},
  month =    mar,
  year =     1999,
  note =     {Available at: http://www.renew.de/},
  url =      {http://www.renew.de/}
}

@Book{rechenberg2006informatik,
  title={Informatik-Handbuch},
  author={Rechenberg, P.},
  isbn={9783446401853},
  url={https://books.google.de/books?id=D2DlwAEACAAJ},
  year={2006},
  publisher={Hanser}
}

@book{ochsenschlager2013modellierung,
  title={Modellierung verteilter Systeme: Konzeption, Formale Spezifikation und Verifikation mit Produktnetzen},
  author={Ochsenschl{\"a}ger, P.},
  isbn={9783322888419},
  series={Programm Angewandte Informatik},
  url={https://books.google.de/books?id=rnieBgAAQBAJ},
  year={2013},
  publisher={Vieweg+Teubner Verlag}
  }



@book{sneed2016softwaremigration,
  title={Softwaremigration in der Praxis: Übertragung alter Softwaresysteme in eine moderne Umgebung},
  author={Sneed, Harry M and Heilmann, Heidi and Wolf, Ellen},
  year={2016},
  publisher={dpunkt}
}

@Book{softwareMigrationModDriven,
  title={Model-Driven Software Migration: A Methodology},
  author={Foreword by Dr.-Ing. Hans-Georg Pagendarm},
  year={2014},
  publisher={Springer}
}

@Article{martens2016ablosung,
  author    = {Martens, Andreas},
  title     = {Ablösung von Legacy-Systemen in Zeiten des digitalen Wandels},
  year      = {2016},
  publisher = {Springer},
}

@Manual{parentDelegationModel,
  author = {IBM},
  title = {Understanding Class loading, the parent-delegation model},
  note = {\url{https://www.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.lnx.70.doc/diag/understanding/cl_delegation.html}},
  journal ={IBM SDK, Java Technology Edition 7.0.0},
  urldate = {2019-05-25}
}

@Manual{namespaces,
  author = {IBM},
  title = {Namespaces and the runtime package},
  journal ={IBM SDK, Java Technology Edition 7.0.0},
  note={\url{https://www.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.lnx.70.doc/diag/understanding/cl_namespaces.htm}},
  urldate = {2019-05-25}
}

@Manual{customClDiffSpace,
  author = {Dennis Sosnosk},
  title = {Java classes and class loadings},
  note = {\url{https://www.ibm.com/developerworks/java/library/j-dyn0429/}},
  urldate = {2019-05-25},
  year = {2003}
}

@Manual{classLoadingIntro,
  author = {Lakshmi Shankar and Simon Burns},
  title = {An introduction to class loading and debugging tool},
  note = {\url{https://www.ibm.com/developerworks/java/library/j-dclp1/}},
  urldate = {2019-05-25},
  year = {2005}
}

@Manual{classLoadingOracle,
  author = {Oracle},
  title = {Setting the Class Path},
  journal= {Java Platform, Standard Edition Tools Reference},
  note = {\url{https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html}},
  urldate = {2019-05-25},
}

@book{Forman04javareflection,
 author = {Forman, Ira R. and Forman, Nate},
 title = {Java Reflection in Action (In Action Series)},
 year = {2004},
 isbn = {1932394184},
 publisher = {Manning Publications Co.},
 address = {Greenwich, CT, USA},
}


% moduels  
@Manual{jmsOracle,
  author = {Mark Reinhold},
  title = {JSR 376: Java Platform Module System},
  journal= {JSRs: Java Specification Requests},
  note = {\url{https://www.jcp.org/en/jsr/detail?id=376}},
  urldate = {2019-05-25},
}
// moduleigenschaften 
@Book{java9modRevealed,
  title     = {Java 9 Modularity Revealed. Project Jigsaw and Scalable Java Applications},
  publisher = {Apress},
  year      = {2017},
  author    = {Alexandru Jecan},
}
// vorteile von java 9 migration issius 
@Book{masteringJava9,
  title     = {Mastering Java 9},
  publisher = {Packt},
  year      = {2017},
  author    = {Dr. Edward Lavieri \& Peter Verhas},
}

@Book{modulProgJava9,
  title     = {Modular Programming in Java 9},
  publisher = {Packt},
  year      = {2017},
  author    = {Koushik Kothagal},
}

@Book{modulMitJava9,
  title     = {Modularisierung mit Java 9},
  publisher = {dpunkt.verlag},
  year      = {2017},
  author    = {Guido Oelmann},
}

@Book{explorJava9,
  title     = {Exploring Java 9},
  publisher = {apress},
  year      = {2018},
  author    = {Fu Cheng},
}

@Book{javaMod9,
  title     = {Java Modularity. Pattern and Practices for developing maintainable applications},
  publisher = {apress},
  year      = {2018},
  author    = {Sander Mark \& Paul Bakker },
}

@Book{softModDes,
  title     = {Software modeling and desing. UML, Use Cases, Patterns, and Software Architectures},
  publisher = {Hassan Gomaa},
  year      = {2011},
  author    = {George Mason University, Fairfax, Virginia},
}

@Book{softMdDes2,
  title     = {Software Architecture in Practice, Second Edition},
  publisher = {Addison Wesley},
  year      = {2003},
  author    = {Len Bass, Paul Clements, Rick Kazman},
}

@Manual{classLoadingOracleMS,
  author = {OpenJDK},
  title = {JEP 261: Module System},
  journal= {JSR 376},
  note = {\url{http://openjdk.java.net/jeps/261#Class-loaders}},
  urldate = {2019-05-25},
}

@Manual{oracModClassLoader,
  author = {Oracle},
  title = {New Class Loader Implementations},
  note = {\url{https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E}},
  urldate = {2019-05-25},
}

@misc{modGraph,
    author = {Mark Reinhold,Chief Architect, Java Platform Group},
    title = {The modular JDK, start to finish, 2010–2017},
    howpublished = {\url{https://twitter.com/mreinhold/status/882644292036026368}},
    year = {2017}
}

@book{jecan2017java,
  title={Java 9: Einf{\"u}hrung in das Modulsystem und die Migration},
  author={Jecan, A.},
  isbn={9783868027587},
  series={shortcuts},
  url={https://books.google.de/books?id=TTApDwAAQBAJ},
  year={2017},
  publisher={entwickler.Press}
}

@book{bloch2017effective,
  title={Effective Java},
  author={Bloch, J.},
  isbn={9780134686042},
  url={https://books.google.de/books?id=BIpDDwAAQBAJ},
  year={2017},
  publisher={Pearson Education}
}

@book{varanasi2015introducing,
  title={Introducing Gradle},
  author={Varanasi, B.},
  isbn={9781484210314},
  lccn={2016427779},
  url={https://books.google.de/books?id=\_kJECwAAQBAJ},
  year={2015},
  publisher={Apress}
}

@book{muschko2014gradle,
  title={Gradle in Action},
  author={Muschko, B.},
  isbn={9781617291302},
  lccn={2012276692},
  url={https://books.google.de/books?id=H9nmmgEACAAJ},
  year={2014},
  publisher={Manning}
}

@book{berglund2011building,
  title={Building and Testing with Gradle: Understanding Next-Generation Builds},
  author={Berglund, T. and McCullough, M.},
  isbn={9781449313098},
  url={https://books.google.de/books?id=WeMLRwFui-UC},
  year={2011},
  publisher={O'Reilly Media}
}


@article{gradleStructure,
  author = {Gradle Inc.},
  title = {Getting Started},
  journal= {JSR 376},
  howpublished = {\url{http://openjdk.java.net/jeps/261#Class-loaders}},
  urldate = {2019-05-25},
}

@book{mitra2015mastering,
  title={Mastering Gradle},
  author={Mitra, M.},
  isbn={9781783981373},
  url={https://books.google.de/books?id=9qFNCgAAQBAJ},
  year={2015},
  publisher={Packt Publishing}
}

@book{ikkink2015gradle,
  title={Gradle Dependency Management},
  author={Ikkink, H.K.},
  isbn={9781784392673},
  url={https://books.google.de/books?id=5mzvCQAAQBAJ},
  year={2015},
  publisher={Packt Publishing}
}

@book{tubiblio36573,
            year = {2003},
          series = {Lecture Notes in Computer Science},
          editor = {Mehmet Aksit and Mira Mezini and Rainer Unland},
           title = {Objects, Components, Architectures, Services, and Applications for a Networked World},
          volume = {2591},
         address = {Berlin/Heidelberg, Germany},
            isbn = {978-3540007371},
       publisher = {Springer},
             url = {http://tubiblio.ulb.tu-darmstadt.de/36573/}
}

@book{kothagal2017modular,
  title={Modular Programming in Java 9: Build large scale applications using Java modularity and Project Jigsaw},
  author={Kothagal, K.},
  isbn={9781787126275},
  url={https://books.google.de/books?id=OJZGDwAAQBAJ},
  year={2017},
  publisher={Packt Publishing}
}

