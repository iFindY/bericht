@book{ochsenschlager2013modellierung,
  title={Modellierung verteilter Systeme: Konzeption, Formale Spezifikation und Verifikation mit Produktnetzen},
  author={Ochsenschl{\"a}ger, P.},
  isbn={9783322888419},
  series={Programm Angewandte Informatik},
  url={https://books.google.de/books?id=rnieBgAAQBAJ},
  year={2013},
  publisher={Vieweg+Teubner Verlag}
}


@Book{kummerReferenznetze,
  title={Referenznetze},
  author={Olaf Kummer },
  isbn={978-3-8325-0035-1 },
  year={2002},
  publisher={Logos}
}
@Thesis{martinWinc,
  author    = {Martin Wincierz},
  title     = {Verbesserung der Erweiterbarkeit und Benutzbarkeit der grafischen Oberfläche des Petrinetz Simulators Renew},
  school    = {Universität Hamburg},
  year      = {2018}
}


@book{Roelke04,
   AUTHOR    = {R{\"o}lke, Heiko},
   SERIES    = {Agent Technology -- Theory and Applications},
   VOLUME    = {2},
   TITLE     = {{Modellierung von Agenten und Multiagentensystemen -- Grundlagen und Anwendungen}},
   PUBLISHER = {Logos Verlag},
   ADDRESS   = {Berlin},
   YEAR      = 2004,
   URL       = {http://logos-verlag.de/cgi-bin/engbuchmid?isbn=0768\&lng=eng\&id=}
}

@Thesis{douvigneau,
  author    = {Michael Duvigneau},
  title     = {Konzeptionelle Modellierung von Plugin-Systemen mit Petrinetzen},
  school    = {Universität Hamburg},
  year      = {2009}
}

@Thesis{schummacher,
  author    = {Jörn Schumacherr},
  title     = {Eine Plugin-Architektur für Renew},
  school    = {Universität Hamburg},
  year      = {2003}
}

@Thesis{cabac,
  author    = {Lawrence Cabac},
  title     = {Modeling Petri Net-Based Multi-Agent Application},
  school    = {Universität Hamburg},
  year      = {2010}
}

@Article{userGuide,
  author    = {Olaf Kummer, Frank Wienberg, Michael Duvigneau, Lawrence Cabac, Michael Haustermann, David Mosteller},
  title     = {\textsc{Renew} – User Guide},
  year      = {2016},
  publisher = {Springer}
}

@Book{rechenberg2006informatik,
  title={Informatik-Handbuch},
  author={Rechenberg, P.},
  isbn={9783446401853},
  url={https://books.google.de/books?id=D2DlwAEACAAJ},
  year={2006},
  publisher={Hanser}
}

@Book{sneed2016softwaremigration,
  title={Softwaremigration in der Praxis: Übertragung alter Softwaresysteme in eine moderne Umgebung},
  author={Sneed, Harry M and Heilmann, Heidi and Wolf, Ellen},
  year={2016},
  publisher={dpunkt}
}

@Book{softwareMigrationModDriven,
  title={Model-Driven Software Migration: A Methodology},
  author={Foreword by Dr.-Ing. Hans-Georg Pagendarm},
  year={2014},
  publisher={Springer}
}

@Article{martens2016ablosung,
  author    = {Martens, Andreas},
  title     = {Ablösung von Legacy-Systemen in Zeiten des digitalen Wandels},
  year      = {2016},
  publisher = {Springer},
}

@article{parentDelegationModel,
  author = {IBM},
  title = {Understanding Class loading, the parent-delegation model},
  howpublished = {\url{https://www.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.lnx.70.doc/diag/understanding/cl_delegation.html}},
  journal ={IBM SDK, Java Technology Edition 7.0.0},
  urldate = {2019-05-25}
}

@article{namespaces,
  author = {IBM},
  title = {Namespaces and the runtime package},
  howpublished = {\url{https://www.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.lnx.70.doc/diag/understanding/cl_namespaces.html}},
  journal ={IBM SDK, Java Technology Edition 7.0.0},
  urldate = {2019-05-25}
}

@article{customCl,
  author = {IBM},
  title = {Custom class loaders},
  howpublished = {\url{https://www.ibm.com/support/knowledgecenter/SSYKE2_7.0.0/com.ibm.java.lnx.70.doc/diag/understanding/cl_custom.html}},
  journal ={IBM SDK, Java Technology Edition 7.0.0},
  urldate = {2019-05-25}
}

@article{customClDiffSpace,
  author = {Dennis Sosnosk},
  title = {Java classes and class loadings},
  howpublished = {\url{https://www.ibm.com/developerworks/java/library/j-dyn0429/}},
  urldate = {2019-05-25},
  year = {2003}
}

@article{classLoadingIntro,
  author = {Lakshmi Shankar and Simon Burns},
  title = {An introduction to class loading and debugging tool},
  howpublished = {\url{https://www.ibm.com/developerworks/java/library/j-dclp1/}},
  urldate = {2019-05-25},
  year = {2005}
}
@article{classLoadingOracle,
  author = {Oracle},
  title = {Setting the Class Path},
  journal= {Java Platform, Standard Edition Tools Reference},
  howpublished = {\url{https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html}},
  urldate = {2019-05-25},
}
@misc{Forman04javareflection,
    author = {Ira R. Forman and Nate Forman and Dr. John Vlissides Ibm and Ira R. Forman and Nate Forman},
    title = {Java Reflection in Action},
    year = {2004}
}

% moduels  
@article{jmsOracle,
  author = {Mark Reinhold},
  title = {JSR 376: Java Platform Module System},
  journal= {JSRs: Java Specification Requests},
  howpublished = {\url{https://www.jcp.org/en/jsr/detail?id=376}},
  urldate = {2019-05-25},
}
// moduleigenschaften 
@Book{java9modRevealed,
  title     = {Java 9 Modularity Revealed. Project Jigsaw and Scalable Java Applications},
  publisher = {Apress},
  year      = {2017},
  author    = {Alexandru Jecan},
}
// vorteile von java 9 migration issius 
@Book{masteringJava9,
  title     = {Mastering Java 9},
  publisher = {Packt},
  year      = {2017},
  author    = {Dr. Edward Lavieri & Peter Verhas},
}

// module types, split packages, migration 
@Book{modulProgJava9,
  title     = {Modular Programming in Java 9},
  publisher = {Packt},
  year      = {2017},
  author    = {Koushik Kothagal},
}

// mifgration problems 
@Book{modulMitJava9,
  title     = {Modularisierung mit Java 9},
  publisher = {dpunkt.verlag},
  year      = {2017},
  author    = {Guido Oelmann},
}

// migration
@Book{explorJava9,
  title     = {Exploring Java 9},
  publisher = {apress},
  year      = {2018},
  author    = {Fu Cheng},
}
// migration   modularisierung target 
@Book{javaMod9,
  title     = {Java Modularity. Pattern and Practices for developing maintainable applications},
  publisher = {apress},
  year      = {2018},
  author    = {Sander Mark & Paul Bakker },
}

@Book{softModDes,
  title     = {Software modeling and desing. UML, Use Cases, Patterns, and Software Architectures},
  publisher = {Hassan Gomaa},
  year      = {2011},
  author    = {George Mason University, Fairfax, Virginia},
}

@Book{softMdDes2,
  title     = {Software Architecture in Practice, Second Edition},
  publisher = {Addison Wesley},
  year      = {2003},
  author    = {Len Bass, Paul Clements, Rick Kazman},
}

@article{classLoadingOracle,
  author = {OpenJDK},
  title = {JEP 261: Module System},
  journal= {JSR 376},
  howpublished = {\url{http://openjdk.java.net/jeps/261#Class-loaders}},
  urldate = {2019-05-25},
}

@article{oracModClassLoader,
  author = {Oracle},
  title = {New Class Loader Implementations},
  howpublished = {\url{https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E}},
  urldate = {2019-05-25},
}

@misc{modGraph,
    author = {Mark Reinhold,Chief Architect, Java Platform Group},
    title = {The modular JDK, start to finish, 2010–2017},
    howpublished = {\url{https://twitter.com/mreinhold/status/882644292036026368}},
    year = {2017}
}