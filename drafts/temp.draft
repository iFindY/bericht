 \begin{lstlisting}[caption=module-info.java,label=module-info,captionpos=b]
    module uni.hamburg { 
      // Benötige Bibliothek
      requieres some.library.name
      // Benötige Bibliothek, die an die Nutzers des Moduls weitergereicht wird
      requieres transitive different.library.name
      // Optionale Bindung während der Laufzeit
      requieres static custom.logging.module

      // Öffentlich Schnittstelle des Moduls
      exports module.package.name; 
      // Vertrauliche Schnittstelle des Moduls für ein anderes Modul
      exports other.module.package.name to other.library.name

      opens 
      opens to

      // Bietet ein Dienst mit der entsprechenden Implementation an 
      provides module.package.name.api.Interface with ,odule.package.name.backend.Implementation  
      // Konsumiert ein Dienst mit der Schnittstellenimplementation 
      uses module.package.name.api.Interface

    } 
  \end{lstlisting}






Die Berechnung komplexer und 

Dementsprechend muss sich diese rechenaufwändigen Strukturen 

die Software in der Lage sein schwierege und komplexe Systeme 


Nicht destotrotz bleibt viel optimierung Spielraum, welches in den letzten Jahren  durch verschiedene Formalismen erweitert wurde.     
Zum Beispiel durch die \textit{gefärbten Marken}, die equivalent Strukturen zusammenfassen und die darin befindlichen Marken typesisren.
Als zusätzliche Erweiterungsformalisums wurden die \textit{syncgronen Kanäle}  eingeführt die 
    


% hier die geschichte 

Hier kommt der Stand der Dinge nachdem ich in der bib gesucht habe und wahrscheinlich nix finde.
Da hab ich was \hyperlink{https://kataloge.uni-hamburg.de/DB=1/SET=1/TTL=1/SHW?FRST=10}{\underline{ inf bib}} 
Noch was \hyperlink{https://kataloge.uni-hamburg.de/DB=1/SET=2/TTL=10/SHW?FRST=6}{\underline{kummer 2002 defenition Referenznetze}}



% Problematik zielt auf Reengineering  http://www.enzyklopaedie-der-wirtschaftsinformatik.de/lexikon/is-management/Integration-und-Migration-von-IT-Systemen/Software-Reengineering/index.html




% Zusammenhang zwischen \textsc{Renew} Petrinetze Nutzen 
\textsc{Renew} ist ein mächtiges Werkzeug zum Semulieren und Visualisieren von unterschiedlichen Petrinetzformalismen, die auf dem S/T-Netzmodel von Petrin \cite{Petri62}aufbaun. 
Da die Konstruktion von den modernen und global vernetzten Systeme eine der Kerndisziplinen in der Softwareentwicklung ist, kann \textsc{Renew} zuverlässig die Wechselwirkung diverser Prozesse von Mensch und Maschine modellieren und dammit als ein einflussreiches Werkzeug in dem Entwicklungsprozess dienen.
% hier das Fazit 
Besonders heute ist das Modulieren verteilter Systeme eine wichtige Disziplin, denn die Vernetzung über das Internet, aufspaltung monolithischer Architekturen und aufteilung der Verantwortung führt zu  schwierigen und nur schwer zu überblickenden Konstruktionen. <




Zum Schluss folgt eine Bewertung und Aussichten für die Weiterentwicklung von \textsc{Renew}.




//task('swaggertest', type: SwaggerTask) {
//
//    // any dirs with classes
//    classesDirs = [
//            file('build/classes')
//            // project(':your-project').sourceSets['main'].output.classesDir
//    ]
//
//    apiSources = [
//            new ApiSource(
//                    springmvc: false,
//                    locations: ['com/novomind/ipim/web/rest'],
//                    schemes: ['http', 'https'],
//                    host: 'arkadi.techlead',
//                    basePath: '/api',
//                    info: new Info(
//                            title: 'Swagger Maven Plugin Sample',
//                            version: 'v1',
//                            description: 'This is a sample for swagger-maven-plugin',
//                            termsOfService: 'http://www.github.com/kongchen/swagger-maven-plugin',
//                            contact: new Contact(
//                                    email: 'kongchen@gmail.com',
//                                    name: 'Kong Chen',
//                                    url: 'http://kongch.com'
//                            ),
//                            license: new License(
//                                    url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
//                                    name: 'Apache 2.0'
//                            )
//                    ),
//                    outputPath: file("${buildDir}/swagger/document.html").path,
//                    swaggerDirectory: file("${buildDir}/swagger/swagger-ui").path,
//            )
//    ]
//}


//resolve {
//    outputFileName = 'NovoAPI'
//    outputFormat = 'JSON'
//    prettyPrint = 'TRUE'
//    readAllResources = 'TRUE'
//    classpath = sourceSets.main.runtimeClasspath
//    resourcePackages = ['com.novomind.ipim.web.rest']
//    outputPath = "$projectDir/src/com/novomind/ipim/web/swagger"
//}
swagger {
    apiSource {
        springmvc = false
        locations = ['com.novomind.ipim.web.rest']
        schemes = ['http', 'https']
        host = 'localhost:8080'
        basePath = '/on_which_the_API_is_served/api'
        outputFormats = ['json', 'yaml']
        info {
            title = "need some swag ?"
            version = "1.0.0"
            license {
                name = 'Apache 2.0'
            }
        }
        securityDefinition {
            name = 'basicAuth'
            type = 'basic'
        }
        outputPath = "$projectDir/src/com/novomind/ipim/web/swagger/documentation.html"
        swaggerDirectory = "$projectDir/src/com/novomind/ipim/web/swagger/"
        swaggerFileName = 'novomindAPI'
        jsonExampleValues = true
        attachSwaggerArtifact = true
    }
}

//swaggerSources {
//    ipimCoreServer {
//        inputFile = file("$projectDir/src/com/novomind/ipim/web/swagger/NovoAPI.json")
//    }
//}

+    \newline In der Abbildung \ref{fig:module-workflow} wird die interne Struktur sowie entsprechenden Verbindungen eines Moduls genau betrachtet. Zu sehen sind drei Module, die ihre Dienste mit dem \textit{exports} Schlüssel über die Schnittstellen anbieten und diese bei Bedarf mit anderen Modulen kombinieren können, indem weitere Funktionalität durch den \textit{requires} Schlüssel von zusätzlichen Modulen angefordert wird. Die interne Umsetzung der Funktionalität bleibt jedoch verborgen und kann Modulübergreifend nicht nachverfolgt werden. 

+    Somit ist eine Legacy-Bibliothek auf den Modulpfad funktionstüchtig und bietet eine ganz besondere Fähigkeit, nämlich die wechselseitige Kommunikation zwischen den Modulpfad sowie den Klassenpfad. 

-  der jdk wurde modularisiert 
-  anstelle eines rt.jar Monolithen wurde die Funktionalität auf verschieden Module aufgeteilt
-  diese sind mit einander Verbund  
-  um die Kopplung der Module klein zu halten gibt es verschiedene arten wie man die Module mit einander verbindet
- wir haben gesehen, dass wir Paketemit requires und exports  anbieten und anfordern können. Diese sind nicht die einzigen Schlüssel die den Modulabhängigkeitsgraphen projizieren.
- P